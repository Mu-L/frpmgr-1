--- pkg/mod/github.com/fatedier/frp@v0.46.0/client/service.go	2022-12-19 14:43:46.000000000 +0800
+++ patches/service.go	2022-12-19 15:23:18.000000000 +0800
@@ -28,12 +28,13 @@
 	"sync/atomic"
 	"time"

 	"github.com/fatedier/golib/crypto"
 	libdial "github.com/fatedier/golib/net/dial"
 	fmux "github.com/hashicorp/yamux"
+	frpmgr "github.com/koho/frpmgr/pkg/util"
 	quic "github.com/lucas-clemente/quic-go"

 	"github.com/fatedier/frp/assets"
 	"github.com/fatedier/frp/pkg/auth"
 	"github.com/fatedier/frp/pkg/config"
 	"github.com/fatedier/frp/pkg/msg"
@@ -369,14 +370,20 @@
 		if err != nil {
 			xl.Warn("fail to build tls configuration, err: %v", err)
 			return err
 		}
 		tlsConfig.NextProtos = []string{"frp"}

+		var serverAddr = cm.cfg.ServerAddr
+		if cm.cfg.DNSServer != "" {
+			if serverAddr, err = frpmgr.LookupIP(cm.cfg.ServerAddr, cm.cfg.DNSServer); err != nil {
+				return err
+			}
+		}
 		conn, err := quic.DialAddr(
-			net.JoinHostPort(cm.cfg.ServerAddr, strconv.Itoa(cm.cfg.ServerPort)),
+			net.JoinHostPort(serverAddr, strconv.Itoa(cm.cfg.ServerPort)),
 			tlsConfig, &quic.Config{
 				MaxIdleTimeout:     time.Duration(cm.cfg.QUICMaxIdleTimeout) * time.Second,
 				MaxIncomingStreams: int64(cm.cfg.QUICMaxIncomingStreams),
 				KeepAlivePeriod:    time.Duration(cm.cfg.QUICKeepalivePeriod) * time.Second,
 			})
 		if err != nil {
@@ -467,14 +474,20 @@
 		libdial.WithProxyAuth(auth),
 		libdial.WithTLSConfig(tlsConfig),
 		libdial.WithAfterHook(libdial.AfterHook{
 			Hook: frpNet.DialHookCustomTLSHeadByte(tlsConfig != nil, cm.cfg.DisableCustomTLSFirstByte),
 		}),
 	)
+	var serverAddr = cm.cfg.ServerAddr
+	if cm.cfg.DNSServer != "" {
+		if serverAddr, err = frpmgr.LookupIP(cm.cfg.ServerAddr, cm.cfg.DNSServer); err != nil {
+			return nil, err
+		}
+	}
 	conn, err := libdial.Dial(
-		net.JoinHostPort(cm.cfg.ServerAddr, strconv.Itoa(cm.cfg.ServerPort)),
+		net.JoinHostPort(serverAddr, strconv.Itoa(cm.cfg.ServerPort)),
 		dialOptions...,
 	)
 	return conn, err
 }

 func (cm *ConnectionManager) Close() error {
